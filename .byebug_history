c
contineu
continue
hits.count
 hits = hits.select { |e| ( (e[:earnings].to_f - e[:earnings_last_q].to_f)/e[:earnings_last_q].to_f) * 100 >= beat }
hits
n
hits
n
hits
hits = hits.select { |e| ( (e[:earnings].to_f - e[:earnings_last_q].to_f)/e[:earnings_last_q].to_f) * 100 >= beat }
hits = self.select { |e| e[:earnings].to_f > 0 && e[:earnings_last_q].to_f > 0 }
beat
continue
@earnings.count
@earnings
n
params[:earnings_beat]
exit
ext
params[:earnings_beat]
params
Earning.all
@earnings
continue
@earnings
continue
@earnings
params
continue
@earnings
continue
@earnings
continue
conntinue
params
continue
params
exit
(two[:earnings].to_f - two[:earnings_last_q].to_f)/two[:earnings_last_q].to_f * 100
two = hits.last
hits
misses = hits.select { |e| ( (e[:earnings].to_f - e[:earnings_last_q].to_f)/e[:earnings_last_q].to_f) * 100 >= earn_beat }
hits
hit
expect_beat
earn_beat
exit
expect_beat
earn_beat
params
exit
Earning.earning_expectation_beat '500', '100'
beat
n
exit
Earning.earning_expectation_beat '50', '100'
beat
exit
if beat = params[:earnings_beat] && params[:expectation_beat]
puts 'hello' if params[:earnings_beat] && params[:expectation_beat]
beat
beat = params[:earnings_beat] && params[:expectation_beat]
params[:expectation_beat]
params[:expecation_beat]
params[:earnings_beat]
params[:earning_beat]
params
params[:earnings_beat] && params[:expecation_beat]
beat
beat = params[:earnings_beat] && params[:expectation_beat]
params
continue
params
continue
params
continue
n
params
n
params
n
params
n
params
n
params
.
params
paams
exit
params
beat = params[:earnings_beat]
beat
beat = params[:earnings_beat] && params[:expectation_beat]
params
continue
beat
continue
beat
continue
beat = params[:earnings_beat] && params[:expectation_beat]
params
continue
params
exit
params[:earnings_beat]
params[:expectation_beat]
params[:earnings_beat] && params[:expectation_beat]
params[:earnings_beat, :expectation_beat]
params
continue
params
exit
beat.to_s.include?('EX')
beat.to_s
beat.to_S
beat.class
beat
beat[0].include?("EX")
beat[0].include("EX")
beat.include?("EX")
beat.include?(EX)
beat.include?('EX')
p beat
beat.class
beat.each.select { |s| s.include?('EX') }
beat.each.select { |s| s.include?('EX')
beat[0]
beat[0].map
beat[0]
beat.split
beat[0].split(',')
beat.class
p beat
beat
beat.each.grep(/^EX$/)
d.grep(/^foo$/)
d=["www", "blog", "foo", "bar"]
a = beat.grep(/^EX$/)
a
a = beat.grep(/'EX'/)
a = beat.grep(/EX/)
beat
beat.grep(/EX/)
beat.match?(/EX/)
beat.match(/EX/)
beat.count
beat
bea
beat.join
beat.class
beat
a.class
a
a.class
a = Earning.first
Earning.first
beat.each { |e| puts e }
beat.include?('EX')
beat[0][:company_name]
beat
beat[:company_name]
symbol
beat.class
beat
symbol.size
symbol.any?{ |a| a == company_symbol }
symbol.any?{ |a| a == compnay_symbol }
symbol.any?{ |a| a == 'EX' }
symbol.pluck('EX')
symbol
symbol[0].split
symbol.include?('EX')
symbol
puts symbol.split.join()
symbol.split.join()
symbol.split
'EX'.in(symbol)
Earning.all
beat
symbol[0]
symbol
exit
symbol.class
symbol[:company_symbol]
symbol
continue
atest
continue
JSON.parse(response.body, symbolize_names: true)
response
resonse.body
exit
JSON.parse(response.body, symbolize_names: true)
exit
earnings == [{:company_symbol=>"ITEST", :earnings_released_on=>"05/10/2016", :earnings=>".50", :expectation=>nil, :earnings_last_q=>".25", :revenue=>nil}]
earnings
exit
Earning.mine beat
exit
Earning.mine beat
beat
exit
Earning.mine beat
beat = beat.to_f
beat
Earning.mine beat
exit
Earning.mine beat
exit
Earning.mine(beat)
val = beat.to_f
beat.to_f
beat
Earning.mine(beat.to_f)
exit
Earning.mine(beat.to_f)
beat
Earning.mine
Earning.mine.beat beat
exit
@earnings.hello_three
@h.hello_three
@h
@a = @h.hello_there
@h.hello_there
@h = Earning.first
@earnings.hello_three
exit
@h.hello_three
@h.hello_there
hello
@h.methods.sort
@h.method.sort
@h.methods
@m = @h.hello
@h = Earning.first
@a.hello
@a.class
@a
@a = Earning.first
@earnings.hello
exit
@n.hello
@n = Earning
Earning.hello
Earning.mine
Earning.nine
Earning.hello
@earnings = Earning.hello
@earnings.hello
@earnings.count
@earnings
Earning.count
Earning.mine.count
